/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.google.firebase.fcm.connection.v1alpha1.Ack', null, global);
goog.exportSymbol('proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse', null, global);
goog.exportSymbol('proto.google.firebase.fcm.connection.v1alpha1.Message', null, global);
goog.exportSymbol('proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.oneofGroups_);
};
goog.inherits(proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.displayName = 'proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.oneofGroups_);
};
goog.inherits(proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.displayName = 'proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.firebase.fcm.connection.v1alpha1.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firebase.fcm.connection.v1alpha1.Ack.displayName = 'proto.google.firebase.fcm.connection.v1alpha1.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.firebase.fcm.connection.v1alpha1.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.firebase.fcm.connection.v1alpha1.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.firebase.fcm.connection.v1alpha1.Message.displayName = 'proto.google.firebase.fcm.connection.v1alpha1.Message';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.RequestTypeCase = {
  REQUEST_TYPE_NOT_SET: 0,
  ACK: 1
};

/**
 * @return {proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.RequestTypeCase}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.getRequestTypeCase = function() {
  return /** @type {proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.RequestTypeCase} */(jspb.Message.computeOneofCase(this, proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.google.firebase.fcm.connection.v1alpha1.Ack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest;
  return proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.firebase.fcm.connection.v1alpha1.Ack;
      reader.readMessage(value,proto.google.firebase.fcm.connection.v1alpha1.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.firebase.fcm.connection.v1alpha1.Ack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ack ack = 1;
 * @return {?proto.google.firebase.fcm.connection.v1alpha1.Ack}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.getAck = function() {
  return /** @type{?proto.google.firebase.fcm.connection.v1alpha1.Ack} */ (
    jspb.Message.getWrapperField(this, proto.google.firebase.fcm.connection.v1alpha1.Ack, 1));
};


/** @param {?proto.google.firebase.fcm.connection.v1alpha1.Ack|undefined} value */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.setAck = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firebase.fcm.connection.v1alpha1.UpstreamRequest.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.ResponseTypeCase = {
  RESPONSE_TYPE_NOT_SET: 0,
  MESSAGE: 1
};

/**
 * @return {proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.ResponseTypeCase}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.getResponseTypeCase = function() {
  return /** @type {proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.ResponseTypeCase} */(jspb.Message.computeOneofCase(this, proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.google.firebase.fcm.connection.v1alpha1.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse;
  return proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.firebase.fcm.connection.v1alpha1.Message;
      reader.readMessage(value,proto.google.firebase.fcm.connection.v1alpha1.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.firebase.fcm.connection.v1alpha1.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional Message message = 1;
 * @return {?proto.google.firebase.fcm.connection.v1alpha1.Message}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.getMessage = function() {
  return /** @type{?proto.google.firebase.fcm.connection.v1alpha1.Message} */ (
    jspb.Message.getWrapperField(this, proto.google.firebase.fcm.connection.v1alpha1.Message, 1));
};


/** @param {?proto.google.firebase.fcm.connection.v1alpha1.Message|undefined} value */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.setMessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firebase.fcm.connection.v1alpha1.DownstreamResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firebase.fcm.connection.v1alpha1.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.Ack}
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firebase.fcm.connection.v1alpha1.Ack;
  return proto.google.firebase.fcm.connection.v1alpha1.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.Ack}
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firebase.fcm.connection.v1alpha1.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.google.firebase.fcm.connection.v1alpha1.Ack.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.google.firebase.fcm.connection.v1alpha1.Ack.prototype.setMessageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.google.firebase.fcm.connection.v1alpha1.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    expireTime: (f = msg.getExpireTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.Message}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.firebase.fcm.connection.v1alpha1.Message;
  return proto.google.firebase.fcm.connection.v1alpha1.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.firebase.fcm.connection.v1alpha1.Message}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpireTime(value);
      break;
    case 4:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.firebase.fcm.connection.v1alpha1.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.firebase.fcm.connection.v1alpha1.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExpireTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.setMessageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.setCreateTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.clearCreateTime = function() {
  this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp expire_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.getExpireTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.setExpireTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.clearExpireTime = function() {
  this.setExpireTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.hasExpireTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> data = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.google.firebase.fcm.connection.v1alpha1.Message.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};


goog.object.extend(exports, proto.google.firebase.fcm.connection.v1alpha1);
