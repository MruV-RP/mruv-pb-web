/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_field_behavior_pb = require('../../../../google/api/field_behavior_pb.js');
goog.object.extend(proto, google_api_field_behavior_pb);
var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.google.cloud.bigquery.v2.StandardSqlDataType', null, global);
goog.exportSymbol('proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind', null, global);
goog.exportSymbol('proto.google.cloud.bigquery.v2.StandardSqlField', null, global);
goog.exportSymbol('proto.google.cloud.bigquery.v2.StandardSqlStructType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.cloud.bigquery.v2.StandardSqlDataType.oneofGroups_);
};
goog.inherits(proto.google.cloud.bigquery.v2.StandardSqlDataType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.cloud.bigquery.v2.StandardSqlDataType.displayName = 'proto.google.cloud.bigquery.v2.StandardSqlDataType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.cloud.bigquery.v2.StandardSqlField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.google.cloud.bigquery.v2.StandardSqlField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.cloud.bigquery.v2.StandardSqlField.displayName = 'proto.google.cloud.bigquery.v2.StandardSqlField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.google.cloud.bigquery.v2.StandardSqlStructType.repeatedFields_, null);
};
goog.inherits(proto.google.cloud.bigquery.v2.StandardSqlStructType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.google.cloud.bigquery.v2.StandardSqlStructType.displayName = 'proto.google.cloud.bigquery.v2.StandardSqlStructType';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.SubTypeCase = {
  SUB_TYPE_NOT_SET: 0,
  ARRAY_ELEMENT_TYPE: 2,
  STRUCT_TYPE: 3
};

/**
 * @return {proto.google.cloud.bigquery.v2.StandardSqlDataType.SubTypeCase}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.getSubTypeCase = function() {
  return /** @type {proto.google.cloud.bigquery.v2.StandardSqlDataType.SubTypeCase} */(jspb.Message.computeOneofCase(this, proto.google.cloud.bigquery.v2.StandardSqlDataType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.toObject = function(opt_includeInstance) {
  return proto.google.cloud.bigquery.v2.StandardSqlDataType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlDataType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeKind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arrayElementType: (f = msg.getArrayElementType()) && proto.google.cloud.bigquery.v2.StandardSqlDataType.toObject(includeInstance, f),
    structType: (f = msg.getStructType()) && proto.google.cloud.bigquery.v2.StandardSqlStructType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlDataType}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.cloud.bigquery.v2.StandardSqlDataType;
  return proto.google.cloud.bigquery.v2.StandardSqlDataType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlDataType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlDataType}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind} */ (reader.readEnum());
      msg.setTypeKind(value);
      break;
    case 2:
      var value = new proto.google.cloud.bigquery.v2.StandardSqlDataType;
      reader.readMessage(value,proto.google.cloud.bigquery.v2.StandardSqlDataType.deserializeBinaryFromReader);
      msg.setArrayElementType(value);
      break;
    case 3:
      var value = new proto.google.cloud.bigquery.v2.StandardSqlStructType;
      reader.readMessage(value,proto.google.cloud.bigquery.v2.StandardSqlStructType.deserializeBinaryFromReader);
      msg.setStructType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.cloud.bigquery.v2.StandardSqlDataType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlDataType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArrayElementType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.cloud.bigquery.v2.StandardSqlDataType.serializeBinaryToWriter
    );
  }
  f = message.getStructType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.cloud.bigquery.v2.StandardSqlStructType.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind = {
  TYPE_KIND_UNSPECIFIED: 0,
  INT64: 2,
  BOOL: 5,
  FLOAT64: 7,
  STRING: 8,
  BYTES: 9,
  TIMESTAMP: 19,
  DATE: 10,
  TIME: 20,
  DATETIME: 21,
  GEOGRAPHY: 22,
  NUMERIC: 23,
  ARRAY: 16,
  STRUCT: 17
};

/**
 * optional TypeKind type_kind = 1;
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.getTypeKind = function() {
  return /** @type {!proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.google.cloud.bigquery.v2.StandardSqlDataType.TypeKind} value */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.setTypeKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional StandardSqlDataType array_element_type = 2;
 * @return {?proto.google.cloud.bigquery.v2.StandardSqlDataType}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.getArrayElementType = function() {
  return /** @type{?proto.google.cloud.bigquery.v2.StandardSqlDataType} */ (
    jspb.Message.getWrapperField(this, proto.google.cloud.bigquery.v2.StandardSqlDataType, 2));
};


/** @param {?proto.google.cloud.bigquery.v2.StandardSqlDataType|undefined} value */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.setArrayElementType = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.google.cloud.bigquery.v2.StandardSqlDataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.clearArrayElementType = function() {
  this.setArrayElementType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.hasArrayElementType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StandardSqlStructType struct_type = 3;
 * @return {?proto.google.cloud.bigquery.v2.StandardSqlStructType}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.getStructType = function() {
  return /** @type{?proto.google.cloud.bigquery.v2.StandardSqlStructType} */ (
    jspb.Message.getWrapperField(this, proto.google.cloud.bigquery.v2.StandardSqlStructType, 3));
};


/** @param {?proto.google.cloud.bigquery.v2.StandardSqlStructType|undefined} value */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.setStructType = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.google.cloud.bigquery.v2.StandardSqlDataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.clearStructType = function() {
  this.setStructType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.cloud.bigquery.v2.StandardSqlDataType.prototype.hasStructType = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.toObject = function(opt_includeInstance) {
  return proto.google.cloud.bigquery.v2.StandardSqlField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: (f = msg.getType()) && proto.google.cloud.bigquery.v2.StandardSqlDataType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlField}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.cloud.bigquery.v2.StandardSqlField;
  return proto.google.cloud.bigquery.v2.StandardSqlField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlField}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.google.cloud.bigquery.v2.StandardSqlDataType;
      reader.readMessage(value,proto.google.cloud.bigquery.v2.StandardSqlDataType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.cloud.bigquery.v2.StandardSqlField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.google.cloud.bigquery.v2.StandardSqlDataType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StandardSqlDataType type = 2;
 * @return {?proto.google.cloud.bigquery.v2.StandardSqlDataType}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.getType = function() {
  return /** @type{?proto.google.cloud.bigquery.v2.StandardSqlDataType} */ (
    jspb.Message.getWrapperField(this, proto.google.cloud.bigquery.v2.StandardSqlDataType, 2));
};


/** @param {?proto.google.cloud.bigquery.v2.StandardSqlDataType|undefined} value */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.google.cloud.bigquery.v2.StandardSqlField.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.toObject = function(opt_includeInstance) {
  return proto.google.cloud.bigquery.v2.StandardSqlStructType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlStructType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.google.cloud.bigquery.v2.StandardSqlField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlStructType}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.google.cloud.bigquery.v2.StandardSqlStructType;
  return proto.google.cloud.bigquery.v2.StandardSqlStructType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlStructType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlStructType}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.cloud.bigquery.v2.StandardSqlField;
      reader.readMessage(value,proto.google.cloud.bigquery.v2.StandardSqlField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.google.cloud.bigquery.v2.StandardSqlStructType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlStructType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.google.cloud.bigquery.v2.StandardSqlField.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StandardSqlField fields = 1;
 * @return {!Array<!proto.google.cloud.bigquery.v2.StandardSqlField>}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.google.cloud.bigquery.v2.StandardSqlField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.google.cloud.bigquery.v2.StandardSqlField, 1));
};


/** @param {!Array<!proto.google.cloud.bigquery.v2.StandardSqlField>} value */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.cloud.bigquery.v2.StandardSqlField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.cloud.bigquery.v2.StandardSqlField}
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.cloud.bigquery.v2.StandardSqlField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.google.cloud.bigquery.v2.StandardSqlStructType.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


goog.object.extend(exports, proto.google.cloud.bigquery.v2);
