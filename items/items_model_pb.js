/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.mruv.Container', null, global);
goog.exportSymbol('proto.mruv.ContainerID', null, global);
goog.exportSymbol('proto.mruv.ContainerType', null, global);
goog.exportSymbol('proto.mruv.ContainerTypeID', null, global);
goog.exportSymbol('proto.mruv.InsideItem', null, global);
goog.exportSymbol('proto.mruv.Item', null, global);
goog.exportSymbol('proto.mruv.ItemID', null, global);
goog.exportSymbol('proto.mruv.ItemType', null, global);
goog.exportSymbol('proto.mruv.ItemTypeID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ItemType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ItemType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ItemType.displayName = 'proto.mruv.ItemType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ItemTypeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ItemTypeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ItemTypeID.displayName = 'proto.mruv.ItemTypeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.Item.displayName = 'proto.mruv.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ItemID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ItemID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ItemID.displayName = 'proto.mruv.ItemID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ContainerType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mruv.ContainerType.repeatedFields_, null);
};
goog.inherits(proto.mruv.ContainerType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ContainerType.displayName = 'proto.mruv.ContainerType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ContainerTypeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ContainerTypeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ContainerTypeID.displayName = 'proto.mruv.ContainerTypeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.Container = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mruv.Container.repeatedFields_, null);
};
goog.inherits(proto.mruv.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.Container.displayName = 'proto.mruv.Container';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ContainerID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ContainerID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ContainerID.displayName = 'proto.mruv.ContainerID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.InsideItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mruv.InsideItem.oneofGroups_);
};
goog.inherits(proto.mruv.InsideItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.InsideItem.displayName = 'proto.mruv.InsideItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ItemType.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ItemType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ItemType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mruv.ItemTypeID.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    baseVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    modelName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    modelHash: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ItemType}
 */
proto.mruv.ItemType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ItemType;
  return proto.mruv.ItemType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ItemType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ItemType}
 */
proto.mruv.ItemType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ItemTypeID;
      reader.readMessage(value,proto.mruv.ItemTypeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBaseWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBaseVolume(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ItemType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ItemType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ItemType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mruv.ItemTypeID.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBaseVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getModelHash();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional ItemTypeID id = 1;
 * @return {?proto.mruv.ItemTypeID}
 */
proto.mruv.ItemType.prototype.getId = function() {
  return /** @type{?proto.mruv.ItemTypeID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemTypeID, 1));
};


/** @param {?proto.mruv.ItemTypeID|undefined} value */
proto.mruv.ItemType.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.ItemType.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.ItemType.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float base_weight = 4;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getBaseWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setBaseWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float base_volume = 5;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getBaseVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setBaseVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string model_name = 6;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setModelName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 model_hash = 7;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getModelHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setModelHash = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ItemTypeID.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ItemTypeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ItemTypeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemTypeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ItemTypeID}
 */
proto.mruv.ItemTypeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ItemTypeID;
  return proto.mruv.ItemTypeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ItemTypeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ItemTypeID}
 */
proto.mruv.ItemTypeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ItemTypeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ItemTypeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ItemTypeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemTypeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.mruv.ItemTypeID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.ItemTypeID.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mruv.ItemID.toObject(includeInstance, f),
    itemTypeId: (f = msg.getItemTypeId()) && proto.mruv.ItemTypeID.toObject(includeInstance, f),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.Item}
 */
proto.mruv.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.Item;
  return proto.mruv.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.Item}
 */
proto.mruv.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ItemID;
      reader.readMessage(value,proto.mruv.ItemID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mruv.ItemTypeID;
      reader.readMessage(value,proto.mruv.ItemTypeID.deserializeBinaryFromReader);
      msg.setItemTypeId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mruv.ItemID.serializeBinaryToWriter
    );
  }
  f = message.getItemTypeId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.ItemTypeID.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional ItemID id = 1;
 * @return {?proto.mruv.ItemID}
 */
proto.mruv.Item.prototype.getId = function() {
  return /** @type{?proto.mruv.ItemID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemID, 1));
};


/** @param {?proto.mruv.ItemID|undefined} value */
proto.mruv.Item.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Item.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Item.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ItemTypeID item_type_id = 2;
 * @return {?proto.mruv.ItemTypeID}
 */
proto.mruv.Item.prototype.getItemTypeId = function() {
  return /** @type{?proto.mruv.ItemTypeID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemTypeID, 2));
};


/** @param {?proto.mruv.ItemTypeID|undefined} value */
proto.mruv.Item.prototype.setItemTypeId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Item.prototype.clearItemTypeId = function() {
  this.setItemTypeId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Item.prototype.hasItemTypeId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float weight = 3;
 * @return {number}
 */
proto.mruv.Item.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.mruv.Item.prototype.setWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float volume = 4;
 * @return {number}
 */
proto.mruv.Item.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mruv.Item.prototype.setVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ItemID.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ItemID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ItemID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ItemID}
 */
proto.mruv.ItemID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ItemID;
  return proto.mruv.ItemID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ItemID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ItemID}
 */
proto.mruv.ItemID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ItemID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ItemID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ItemID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.mruv.ItemID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.ItemID.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mruv.ContainerType.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ContainerType.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ContainerType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ContainerType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mruv.ContainerTypeID.toObject(includeInstance, f),
    containerItemTypeId: (f = msg.getContainerItemTypeId()) && proto.mruv.ItemTypeID.toObject(includeInstance, f),
    maxNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    validItemTypesList: jspb.Message.toObjectList(msg.getValidItemTypesList(),
    proto.mruv.ItemTypeID.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ContainerType}
 */
proto.mruv.ContainerType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ContainerType;
  return proto.mruv.ContainerType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ContainerType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ContainerType}
 */
proto.mruv.ContainerType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ContainerTypeID;
      reader.readMessage(value,proto.mruv.ContainerTypeID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mruv.ItemTypeID;
      reader.readMessage(value,proto.mruv.ItemTypeID.deserializeBinaryFromReader);
      msg.setContainerItemTypeId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxVolume(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxWeight(value);
      break;
    case 8:
      var value = new proto.mruv.ItemTypeID;
      reader.readMessage(value,proto.mruv.ItemTypeID.deserializeBinaryFromReader);
      msg.addValidItemTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ContainerType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ContainerType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ContainerType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mruv.ContainerTypeID.serializeBinaryToWriter
    );
  }
  f = message.getContainerItemTypeId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.ItemTypeID.serializeBinaryToWriter
    );
  }
  f = message.getMaxNumber();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMaxWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getValidItemTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.mruv.ItemTypeID.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContainerTypeID id = 1;
 * @return {?proto.mruv.ContainerTypeID}
 */
proto.mruv.ContainerType.prototype.getId = function() {
  return /** @type{?proto.mruv.ContainerTypeID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ContainerTypeID, 1));
};


/** @param {?proto.mruv.ContainerTypeID|undefined} value */
proto.mruv.ContainerType.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.ContainerType.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.ContainerType.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ItemTypeID container_item_type_id = 2;
 * @return {?proto.mruv.ItemTypeID}
 */
proto.mruv.ContainerType.prototype.getContainerItemTypeId = function() {
  return /** @type{?proto.mruv.ItemTypeID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemTypeID, 2));
};


/** @param {?proto.mruv.ItemTypeID|undefined} value */
proto.mruv.ContainerType.prototype.setContainerItemTypeId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.ContainerType.prototype.clearContainerItemTypeId = function() {
  this.setContainerItemTypeId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.ContainerType.prototype.hasContainerItemTypeId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 max_number = 3;
 * @return {number}
 */
proto.mruv.ContainerType.prototype.getMaxNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.mruv.ContainerType.prototype.setMaxNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float max_volume = 4;
 * @return {number}
 */
proto.mruv.ContainerType.prototype.getMaxVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mruv.ContainerType.prototype.setMaxVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float max_weight = 5;
 * @return {number}
 */
proto.mruv.ContainerType.prototype.getMaxWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mruv.ContainerType.prototype.setMaxWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated ItemTypeID valid_item_types = 8;
 * @return {!Array<!proto.mruv.ItemTypeID>}
 */
proto.mruv.ContainerType.prototype.getValidItemTypesList = function() {
  return /** @type{!Array<!proto.mruv.ItemTypeID>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mruv.ItemTypeID, 8));
};


/** @param {!Array<!proto.mruv.ItemTypeID>} value */
proto.mruv.ContainerType.prototype.setValidItemTypesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.mruv.ItemTypeID=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mruv.ItemTypeID}
 */
proto.mruv.ContainerType.prototype.addValidItemTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.mruv.ItemTypeID, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mruv.ContainerType.prototype.clearValidItemTypesList = function() {
  this.setValidItemTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ContainerTypeID.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ContainerTypeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ContainerTypeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerTypeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ContainerTypeID}
 */
proto.mruv.ContainerTypeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ContainerTypeID;
  return proto.mruv.ContainerTypeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ContainerTypeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ContainerTypeID}
 */
proto.mruv.ContainerTypeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ContainerTypeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ContainerTypeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ContainerTypeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerTypeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.mruv.ContainerTypeID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.ContainerTypeID.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mruv.Container.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.Container.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.Container.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.Container} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Container.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.mruv.ContainerID.toObject(includeInstance, f),
    typeId: (f = msg.getTypeId()) && proto.mruv.ContainerTypeID.toObject(includeInstance, f),
    itemId: (f = msg.getItemId()) && proto.mruv.ItemID.toObject(includeInstance, f),
    itemsInside: jspb.Message.getFieldWithDefault(msg, 4, 0),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.mruv.InsideItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.Container}
 */
proto.mruv.Container.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.Container;
  return proto.mruv.Container.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.Container}
 */
proto.mruv.Container.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ContainerID;
      reader.readMessage(value,proto.mruv.ContainerID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mruv.ContainerTypeID;
      reader.readMessage(value,proto.mruv.ContainerTypeID.deserializeBinaryFromReader);
      msg.setTypeId(value);
      break;
    case 3:
      var value = new proto.mruv.ItemID;
      reader.readMessage(value,proto.mruv.ItemID.deserializeBinaryFromReader);
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemsInside(value);
      break;
    case 5:
      var value = new proto.mruv.InsideItem;
      reader.readMessage(value,proto.mruv.InsideItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.Container.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Container.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mruv.ContainerID.serializeBinaryToWriter
    );
  }
  f = message.getTypeId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.ContainerTypeID.serializeBinaryToWriter
    );
  }
  f = message.getItemId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mruv.ItemID.serializeBinaryToWriter
    );
  }
  f = message.getItemsInside();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.mruv.InsideItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContainerID id = 1;
 * @return {?proto.mruv.ContainerID}
 */
proto.mruv.Container.prototype.getId = function() {
  return /** @type{?proto.mruv.ContainerID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ContainerID, 1));
};


/** @param {?proto.mruv.ContainerID|undefined} value */
proto.mruv.Container.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContainerTypeID type_id = 2;
 * @return {?proto.mruv.ContainerTypeID}
 */
proto.mruv.Container.prototype.getTypeId = function() {
  return /** @type{?proto.mruv.ContainerTypeID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ContainerTypeID, 2));
};


/** @param {?proto.mruv.ContainerTypeID|undefined} value */
proto.mruv.Container.prototype.setTypeId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearTypeId = function() {
  this.setTypeId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasTypeId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ItemID item_id = 3;
 * @return {?proto.mruv.ItemID}
 */
proto.mruv.Container.prototype.getItemId = function() {
  return /** @type{?proto.mruv.ItemID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemID, 3));
};


/** @param {?proto.mruv.ItemID|undefined} value */
proto.mruv.Container.prototype.setItemId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearItemId = function() {
  this.setItemId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasItemId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 items_inside = 4;
 * @return {number}
 */
proto.mruv.Container.prototype.getItemsInside = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mruv.Container.prototype.setItemsInside = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated InsideItem items = 5;
 * @return {!Array<!proto.mruv.InsideItem>}
 */
proto.mruv.Container.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.mruv.InsideItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mruv.InsideItem, 5));
};


/** @param {!Array<!proto.mruv.InsideItem>} value */
proto.mruv.Container.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.mruv.InsideItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mruv.InsideItem}
 */
proto.mruv.Container.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.mruv.InsideItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mruv.Container.prototype.clearItemsList = function() {
  this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ContainerID.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ContainerID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ContainerID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ContainerID}
 */
proto.mruv.ContainerID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ContainerID;
  return proto.mruv.ContainerID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ContainerID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ContainerID}
 */
proto.mruv.ContainerID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ContainerID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ContainerID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ContainerID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ContainerID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.mruv.ContainerID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.ContainerID.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mruv.InsideItem.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.mruv.InsideItem.ItemOrIdCase = {
  ITEM_OR_ID_NOT_SET: 0,
  ITEM_ID: 2,
  ITEM: 3
};

/**
 * @return {proto.mruv.InsideItem.ItemOrIdCase}
 */
proto.mruv.InsideItem.prototype.getItemOrIdCase = function() {
  return /** @type {proto.mruv.InsideItem.ItemOrIdCase} */(jspb.Message.computeOneofCase(this, proto.mruv.InsideItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.InsideItem.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.InsideItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.InsideItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.InsideItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    containerId: (f = msg.getContainerId()) && proto.mruv.ContainerID.toObject(includeInstance, f),
    itemId: (f = msg.getItemId()) && proto.mruv.ItemID.toObject(includeInstance, f),
    item: (f = msg.getItem()) && proto.mruv.Item.toObject(includeInstance, f),
    position: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.InsideItem}
 */
proto.mruv.InsideItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.InsideItem;
  return proto.mruv.InsideItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.InsideItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.InsideItem}
 */
proto.mruv.InsideItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ContainerID;
      reader.readMessage(value,proto.mruv.ContainerID.deserializeBinaryFromReader);
      msg.setContainerId(value);
      break;
    case 2:
      var value = new proto.mruv.ItemID;
      reader.readMessage(value,proto.mruv.ItemID.deserializeBinaryFromReader);
      msg.setItemId(value);
      break;
    case 3:
      var value = new proto.mruv.Item;
      reader.readMessage(value,proto.mruv.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.InsideItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.InsideItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.InsideItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.InsideItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContainerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mruv.ContainerID.serializeBinaryToWriter
    );
  }
  f = message.getItemId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.ItemID.serializeBinaryToWriter
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mruv.Item.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional ContainerID container_id = 1;
 * @return {?proto.mruv.ContainerID}
 */
proto.mruv.InsideItem.prototype.getContainerId = function() {
  return /** @type{?proto.mruv.ContainerID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ContainerID, 1));
};


/** @param {?proto.mruv.ContainerID|undefined} value */
proto.mruv.InsideItem.prototype.setContainerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.InsideItem.prototype.clearContainerId = function() {
  this.setContainerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.InsideItem.prototype.hasContainerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ItemID item_id = 2;
 * @return {?proto.mruv.ItemID}
 */
proto.mruv.InsideItem.prototype.getItemId = function() {
  return /** @type{?proto.mruv.ItemID} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemID, 2));
};


/** @param {?proto.mruv.ItemID|undefined} value */
proto.mruv.InsideItem.prototype.setItemId = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.mruv.InsideItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.InsideItem.prototype.clearItemId = function() {
  this.setItemId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.InsideItem.prototype.hasItemId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Item item = 3;
 * @return {?proto.mruv.Item}
 */
proto.mruv.InsideItem.prototype.getItem = function() {
  return /** @type{?proto.mruv.Item} */ (
    jspb.Message.getWrapperField(this, proto.mruv.Item, 3));
};


/** @param {?proto.mruv.Item|undefined} value */
proto.mruv.InsideItem.prototype.setItem = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.mruv.InsideItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.InsideItem.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.InsideItem.prototype.hasItem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 position = 4;
 * @return {number}
 */
proto.mruv.InsideItem.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mruv.InsideItem.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.mruv);
